// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: src/grpc/proto/sys_admin_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "sys_admin_service";

export interface CountryId {
  countryId: number;
}

export interface TaxDetail {
  countryId: number;
  taxId: number;
  taxName: string;
  taxPercentage: string;
  taxNickname: string;
  isTaxOnInvoice: boolean;
  isRegistrationOptional: boolean;
}

export interface TaxDetailsOfCountryResponse {
  isSuccess: boolean;
  taxDetails: TaxDetail[];
}

function createBaseCountryId(): CountryId {
  return { countryId: 0 };
}

export const CountryId: MessageFns<CountryId> = {
  encode(message: CountryId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.countryId !== 0) {
      writer.uint32(8).int32(message.countryId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CountryId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCountryId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.countryId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CountryId {
    return { countryId: isSet(object.countryId) ? globalThis.Number(object.countryId) : 0 };
  },

  toJSON(message: CountryId): unknown {
    const obj: any = {};
    if (message.countryId !== 0) {
      obj.countryId = Math.round(message.countryId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CountryId>, I>>(base?: I): CountryId {
    return CountryId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CountryId>, I>>(object: I): CountryId {
    const message = createBaseCountryId();
    message.countryId = object.countryId ?? 0;
    return message;
  },
};

function createBaseTaxDetail(): TaxDetail {
  return {
    countryId: 0,
    taxId: 0,
    taxName: "",
    taxPercentage: "",
    taxNickname: "",
    isTaxOnInvoice: false,
    isRegistrationOptional: false,
  };
}

export const TaxDetail: MessageFns<TaxDetail> = {
  encode(message: TaxDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.countryId !== 0) {
      writer.uint32(8).int32(message.countryId);
    }
    if (message.taxId !== 0) {
      writer.uint32(16).int32(message.taxId);
    }
    if (message.taxName !== "") {
      writer.uint32(26).string(message.taxName);
    }
    if (message.taxPercentage !== "") {
      writer.uint32(34).string(message.taxPercentage);
    }
    if (message.taxNickname !== "") {
      writer.uint32(42).string(message.taxNickname);
    }
    if (message.isTaxOnInvoice !== false) {
      writer.uint32(48).bool(message.isTaxOnInvoice);
    }
    if (message.isRegistrationOptional !== false) {
      writer.uint32(56).bool(message.isRegistrationOptional);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaxDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaxDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.countryId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.taxId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.taxName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.taxPercentage = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.taxNickname = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isTaxOnInvoice = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isRegistrationOptional = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaxDetail {
    return {
      countryId: isSet(object.countryId) ? globalThis.Number(object.countryId) : 0,
      taxId: isSet(object.taxId) ? globalThis.Number(object.taxId) : 0,
      taxName: isSet(object.taxName) ? globalThis.String(object.taxName) : "",
      taxPercentage: isSet(object.taxPercentage) ? globalThis.String(object.taxPercentage) : "",
      taxNickname: isSet(object.taxNickname) ? globalThis.String(object.taxNickname) : "",
      isTaxOnInvoice: isSet(object.isTaxOnInvoice) ? globalThis.Boolean(object.isTaxOnInvoice) : false,
      isRegistrationOptional: isSet(object.isRegistrationOptional)
        ? globalThis.Boolean(object.isRegistrationOptional)
        : false,
    };
  },

  toJSON(message: TaxDetail): unknown {
    const obj: any = {};
    if (message.countryId !== 0) {
      obj.countryId = Math.round(message.countryId);
    }
    if (message.taxId !== 0) {
      obj.taxId = Math.round(message.taxId);
    }
    if (message.taxName !== "") {
      obj.taxName = message.taxName;
    }
    if (message.taxPercentage !== "") {
      obj.taxPercentage = message.taxPercentage;
    }
    if (message.taxNickname !== "") {
      obj.taxNickname = message.taxNickname;
    }
    if (message.isTaxOnInvoice !== false) {
      obj.isTaxOnInvoice = message.isTaxOnInvoice;
    }
    if (message.isRegistrationOptional !== false) {
      obj.isRegistrationOptional = message.isRegistrationOptional;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaxDetail>, I>>(base?: I): TaxDetail {
    return TaxDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaxDetail>, I>>(object: I): TaxDetail {
    const message = createBaseTaxDetail();
    message.countryId = object.countryId ?? 0;
    message.taxId = object.taxId ?? 0;
    message.taxName = object.taxName ?? "";
    message.taxPercentage = object.taxPercentage ?? "";
    message.taxNickname = object.taxNickname ?? "";
    message.isTaxOnInvoice = object.isTaxOnInvoice ?? false;
    message.isRegistrationOptional = object.isRegistrationOptional ?? false;
    return message;
  },
};

function createBaseTaxDetailsOfCountryResponse(): TaxDetailsOfCountryResponse {
  return { isSuccess: false, taxDetails: [] };
}

export const TaxDetailsOfCountryResponse: MessageFns<TaxDetailsOfCountryResponse> = {
  encode(message: TaxDetailsOfCountryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isSuccess !== false) {
      writer.uint32(8).bool(message.isSuccess);
    }
    for (const v of message.taxDetails) {
      TaxDetail.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaxDetailsOfCountryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaxDetailsOfCountryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isSuccess = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.taxDetails.push(TaxDetail.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaxDetailsOfCountryResponse {
    return {
      isSuccess: isSet(object.isSuccess) ? globalThis.Boolean(object.isSuccess) : false,
      taxDetails: globalThis.Array.isArray(object?.taxDetails)
        ? object.taxDetails.map((e: any) => TaxDetail.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TaxDetailsOfCountryResponse): unknown {
    const obj: any = {};
    if (message.isSuccess !== false) {
      obj.isSuccess = message.isSuccess;
    }
    if (message.taxDetails?.length) {
      obj.taxDetails = message.taxDetails.map((e) => TaxDetail.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaxDetailsOfCountryResponse>, I>>(base?: I): TaxDetailsOfCountryResponse {
    return TaxDetailsOfCountryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaxDetailsOfCountryResponse>, I>>(object: I): TaxDetailsOfCountryResponse {
    const message = createBaseTaxDetailsOfCountryResponse();
    message.isSuccess = object.isSuccess ?? false;
    message.taxDetails = object.taxDetails?.map((e) => TaxDetail.fromPartial(e)) || [];
    return message;
  },
};

export type SystemAdminServiceService = typeof SystemAdminServiceService;
export const SystemAdminServiceService = {
  getTaxDetailsOfCountry: {
    path: "/sys_admin_service.SystemAdminService/GetTaxDetailsOfCountry",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CountryId) => Buffer.from(CountryId.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CountryId.decode(value),
    responseSerialize: (value: TaxDetailsOfCountryResponse) =>
      Buffer.from(TaxDetailsOfCountryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TaxDetailsOfCountryResponse.decode(value),
  },
} as const;

export interface SystemAdminServiceServer extends UntypedServiceImplementation {
  getTaxDetailsOfCountry: handleUnaryCall<CountryId, TaxDetailsOfCountryResponse>;
}

export interface SystemAdminServiceClient extends Client {
  getTaxDetailsOfCountry(
    request: CountryId,
    callback: (error: ServiceError | null, response: TaxDetailsOfCountryResponse) => void,
  ): ClientUnaryCall;
  getTaxDetailsOfCountry(
    request: CountryId,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TaxDetailsOfCountryResponse) => void,
  ): ClientUnaryCall;
  getTaxDetailsOfCountry(
    request: CountryId,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TaxDetailsOfCountryResponse) => void,
  ): ClientUnaryCall;
}

export const SystemAdminServiceClient = makeGenericClientConstructor(
  SystemAdminServiceService,
  "sys_admin_service.SystemAdminService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): SystemAdminServiceClient;
  service: typeof SystemAdminServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
